### src/components/AdminPanel/index.tsx
import React, { useState } from 'react';
import { AlertTriangle, Layout } from 'lucide-react';

export function AdminPanel() {
  const [assetData, setAssetData] = useState({
    asset: '',
    price: '',
  });

  const handlePriceUpdate = (e: React.FormEvent) => {
    e.preventDefault();
    // Handle price update
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">
          Emergency Controls
        </h2>
        <div className="flex items-center justify-between p-4 bg-red-50 rounded-lg">
          <div className="flex items-center">
            <AlertTriangle className="h-6 w-6 text-red-600 mr-3" />
            <div>
              <p className="text-sm font-medium text-red-900">Emergency Stop</p>
              <p className="text-sm text-red-700">
                Disable all platform operations
              </p>
            </div>
          </div>
          <button className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
            Stop Platform
          </button>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">
          Price Feed Updates
        </h2>
        <form onSubmit={handlePriceUpdate}>
          <div className="grid grid-cols-1 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Asset
              </label>
              <select
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                value={assetData.asset}
                onChange={(e) =>
                  setAssetData({ ...assetData, asset: e.target.value })
                }
                required
              >
                <option value="">Select asset</option>
                <option value="STX">STX</option>
                <option value="BTC">BTC</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Price (USD)
              </label>
              <input
                type="number"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                value={assetData.price}
                onChange={(e) =>
                  setAssetData({ ...assetData, price: e.target.value })
                }
                required
              />
            </div>
            <button
              type="submit"
              className="w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Update Price
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}


### src/components/Dashboard/index.tsx
import React from 'react';
import { Activity, TrendingUp, AlertTriangle } from 'lucide-react';
import { UserReputation, UserLoans } from '../../types';

interface DashboardProps {
  reputation: UserReputation;
  loans: UserLoans;
}

export function Dashboard({ reputation, loans }: DashboardProps) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex items-center">
          <div className="p-2 bg-green-100 rounded-lg">
            <Activity className="h-6 w-6 text-green-600" />
          </div>
          <div className="ml-4">
            <p className="text-sm font-medium text-gray-600">Reputation Score</p>
            <p className="text-2xl font-semibold text-gray-900">
              {reputation.reputationScore}
            </p>
          </div>
        </div>
        <div className="mt-4">
          <div className="flex justify-between text-sm">
            <span className="text-gray-500">Successful Repayments</span>
            <span className="font-medium text-gray-900">
              {reputation.successfulRepayments}
            </span>
          </div>
          <div className="flex justify-between text-sm mt-2">
            <span className="text-gray-500">Defaults</span>
            <span className="font-medium text-gray-900">{reputation.defaults}</span>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex items-center">
          <div className="p-2 bg-blue-100 rounded-lg">
            <TrendingUp className="h-6 w-6 text-blue-600" />
          </div>
          <div className="ml-4">
            <p className="text-sm font-medium text-gray-600">Active Loans</p>
            <p className="text-2xl font-semibold text-gray-900">
              {loans.activeLoans.length}
            </p>
          </div>
        </div>
        <div className="mt-4">
          <div className="flex justify-between text-sm">
            <span className="text-gray-500">Total Active Borrowed</span>
            <span className="font-medium text-gray-900">
              ${loans.totalActiveBorrowed.toLocaleString()}
            </span>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex items-center">
          <div className="p-2 bg-yellow-100 rounded-lg">
            <AlertTriangle className="h-6 w-6 text-yellow-600" />
          </div>
          <div className="ml-4">
            <p className="text-sm font-medium text-gray-600">Platform Status</p>
            <p className="text-2xl font-semibold text-green-600">Active</p>
          </div>
        </div>
        <div className="mt-4">
          <div className="flex justify-between text-sm">
            <span className="text-gray-500">Last Block Height</span>
            <span className="font-medium text-gray-900">12345</span>
          </div>
        </div>
      </div>
    </div>
  );
}

### src/components/Layout/index.tsx
import React from "react";
import { WalletIcon, LogOutIcon } from "lucide-react";
import { authenticate, getUserData, signUserOut, userSession } from "../../lib/auth";

interface LayoutProps {
  children: React.ReactNode;
}

export function Layout({ children }: LayoutProps) {
  const [isAuthenticated, setIsAuthenticated] = React.useState(false);
  const [userData, setUserData] = React.useState<any>(null);

  React.useEffect(() => {
    if (userSession.isSignInPending()) {
      userSession.handlePendingSignIn().then((userData) => {
        setIsAuthenticated(true);
        setUserData(userData);
      });
    } else if (userSession.isUserSignedIn()) {
      setIsAuthenticated(true);
      setUserData(getUserData());
    }
  }, []);

  const handleAuth = () => {
    if (isAuthenticated) {
      signUserOut();
    } else {
      authenticate();
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <nav className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <h1 className="text-xl font-bold text-blue-600">MicroLend</h1>
            </div>
            <div className="flex items-center gap-4">
              {isAuthenticated && userData?.profile?.stxAddress?.mainnet && (
                <span className="text-sm text-gray-600">
                  {userData.profile.stxAddress.mainnet}
                </span>
              )}
              <button
                onClick={handleAuth}
                className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                {isAuthenticated ? (
                  <>
                    <LogOutIcon className="h-5 w-5 mr-2" />
                    Disconnect
                  </>
                ) : (
                  <>
                    <WalletIcon className="h-5 w-5 mr-2" />
                    Connect Wallet
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      </nav>
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {children}
      </main>
    </div>
  );
}

### src/components/loans/LoanForm/hooks.ts
import { useState } from 'react';
import { createLoan } from '../../../lib/stacks/loans';
import { userSession } from '../../../lib/auth';
import { LoanFormData } from './types';

export function useLoanForm() {
  const [formData, setFormData] = useState<LoanFormData>({
    amount: '',
    collateralAmount: '',
    collateralAsset: '',
    duration: '',
    interestRate: '',
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!userSession.isUserSignedIn()) {
      setError('Please connect your wallet first');
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const response = await createLoan(
        Number(formData.amount),
        Number(formData.collateralAmount),
        Number(formData.duration),
        Number(formData.interestRate)
      );
      console.log('Loan creation transaction:', response);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create loan');
    } finally {
      setIsLoading(false);
    }
  };

  return {
    formData,
    setFormData,
    isLoading,
    error,
    handleSubmit,
  };
}

### src/components/loans/LoanForm/index.tsx
import React from 'react';
import { AlertCircle } from 'lucide-react';
import { useLoanForm } from './hooks';

export function LoanForm() {
  const { formData, setFormData, isLoading, error, handleSubmit } = useLoanForm();

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <h2 className="text-lg font-semibold text-gray-900 mb-4">
        Create Loan Request
      </h2>
      {error && (
        <div className="mb-4 p-4 bg-red-50 rounded-lg flex items-center">
          <AlertCircle className="h-5 w-5 text-red-500 mr-2" />
          <p className="text-sm text-red-600">{error}</p>
        </div>
      )}
      <form onSubmit={handleSubmit}>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700">
              Loan Amount (STX)
            </label>
            <input
              type="number"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              value={formData.amount}
              onChange={(e) =>
                setFormData({ ...formData, amount: e.target.value })
              }
              required
              min="0"
              step="1"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              Collateral Amount
            </label>
            <input
              type="number"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              value={formData.collateralAmount}
              onChange={(e) =>
                setFormData({ ...formData, collateralAmount: e.target.value })
              }
              required
              min="0"
              step="1"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              Collateral Asset
            </label>
            <select
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              value={formData.collateralAsset}
              onChange={(e) =>
                setFormData({ ...formData, collateralAsset: e.target.value })
              }
              required
            >
              <option value="">Select asset</option>
              <option value="STX">STX</option>
              <option value="BTC">BTC</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              Duration (days)
            </label>
            <input
              type="number"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              value={formData.duration}
              onChange={(e) =>
                setFormData({ ...formData, duration: e.target.value })
              }
              min="1"
              max="365"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              Interest Rate (%)
            </label>
            <input
              type="number"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              value={formData.interestRate}
              onChange={(e) =>
                setFormData({ ...formData, interestRate: e.target.value })
              }
              min="0"
              max="50"
              required
            />
          </div>
        </div>

        <div className="mt-6">
          <button
            type="submit"
            disabled={isLoading}
            className={`w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white ${
              isLoading
                ? "bg-blue-400 cursor-not-allowed"
                : "bg-blue-600 hover:bg-blue-700"
            } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500`}
          >
            {isLoading ? "Creating Loan..." : "Create Loan Request"}
          </button>
        </div>
      </form>
    </div>
  );
}

### src/components/loans/LoanForm/types.ts
export interface LoanFormData {
	amount: string;
	collateralAmount: string;
	collateralAsset: string;
	duration: string;
	interestRate: string;
  }


### src/components/LoanForm.tsx
import React, { useState } from "react";
import { AlertCircle } from "lucide-react";
import { createLoan } from "../lib/stacks";
import { userSession } from "../lib/auth";

export function LoanForm() {
  const [formData, setFormData] = useState({
    amount: "",
    collateralAmount: "",
    collateralAsset: "",
    duration: "",
    interestRate: "",
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!userSession.isUserSignedIn()) {
      setError("Please connect your wallet first");
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const response = await createLoan(
        Number(formData.amount),
        Number(formData.collateralAmount),
        Number(formData.duration),
        Number(formData.interestRate)
      );
      
      console.log("Loan creation transaction:", response);
      // You might want to show a success message or redirect
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to create loan");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <h2 className="text-lg font-semibold text-gray-900 mb-4">
        Create Loan Request
      </h2>
      {error && (
        <div className="mb-4 p-4 bg-red-50 rounded-lg flex items-center">
          <AlertCircle className="h-5 w-5 text-red-500 mr-2" />
          <p className="text-sm text-red-600">{error}</p>
        </div>
      )}
      <form onSubmit={handleSubmit}>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700">
              Loan Amount (STX)
            </label>
            <input
              type="number"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              value={formData.amount}
              onChange={(e) =>
                setFormData({ ...formData, amount: e.target.value })
              }
              required
              min="0"
              step="1"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              Collateral Amount
            </label>
            <input
              type="number"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              value={formData.collateralAmount}
              onChange={(e) =>
                setFormData({ ...formData, collateralAmount: e.target.value })
              }
              required
              min="0"
              step="1"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              Collateral Asset
            </label>
            <select
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              value={formData.collateralAsset}
              onChange={(e) =>
                setFormData({ ...formData, collateralAsset: e.target.value })
              }
              required
            >
              <option value="">Select asset</option>
              <option value="STX">STX</option>
              <option value="BTC">BTC</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              Duration (days)
            </label>
            <input
              type="number"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              value={formData.duration}
              onChange={(e) =>
                setFormData({ ...formData, duration: e.target.value })
              }
              min="1"
              max="365"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              Interest Rate (%)
            </label>
            <input
              type="number"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              value={formData.interestRate}
              onChange={(e) =>
                setFormData({ ...formData, interestRate: e.target.value })
              }
              min="0"
              max="50"
              required
            />
          </div>
        </div>

        <div className="mt-6">
          <button
            type="submit"
            disabled={isLoading}
            className={`w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white ${
              isLoading
                ? "bg-blue-400 cursor-not-allowed"
                : "bg-blue-600 hover:bg-blue-700"
            } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500`}
          >
            {isLoading ? "Creating Loan..." : "Create Loan Request"}
          </button>
        </div>
      </form>
    </div>
  );
}

### src/components/LoanTables.tsx
import React from 'react';
import { Loan } from '../types';
import { Clock, AlertCircle } from 'lucide-react';
import { liquidateLoan } from '../lib/stacks';
import { userSession } from '../lib/auth';

interface LoanTableProps {
  loans: Loan[];
}

export function LoanTable({ loans }: LoanTableProps) {
  const handleLiquidate = async (loanId: number) => {
    if (!userSession.isUserSignedIn()) {
      alert("Please connect your wallet first");
      return;
    }

    try {
      const response = await liquidateLoan(loanId);
      console.log("Liquidation transaction:", response);
      // You might want to refresh the loans list or show a success message
    } catch (error) {
      console.error("Error liquidating loan:", error);
      alert("Failed to liquidate loan");
    }
  };

  return (
    <div className="bg-white shadow rounded-lg overflow-hidden">
      <div className="px-4 py-5 sm:px-6">
        <h3 className="text-lg font-medium leading-6 text-gray-900">Active Loans</h3>
      </div>
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Loan ID
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Borrower
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Amount
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Collateral
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Interest Rate
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Duration
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {loans.map((loan) => (
              <tr key={loan.loanId}>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  #{loan.loanId}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {loan.borrower.slice(0, 6)}...{loan.borrower.slice(-4)}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  ${loan.amount.toLocaleString()}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {loan.collateralAmount} {loan.collateralAsset}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {loan.interestRate}%
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {loan.duration} days
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span
                    className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                      loan.status === 'ACTIVE'
                        ? 'bg-green-100 text-green-800'
                        : loan.status === 'PENDING'
                        ? 'bg-yellow-100 text-yellow-800'
                        : 'bg-red-100 text-red-800'
                    }`}
                  >
                    {loan.status}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {loan.status === 'ACTIVE' && (
                    <button
                      className="text-red-600 hover:text-red-900"
                      onClick={() => handleLiquidate(loan.loanId)}
                    >
                      Liquidate
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

### src/lib/stacks/config.ts
import { StacksTestnet } from '@stacks/network';

export const network = new StacksTestnet();
export const contractAddress = 'STHB047A30W99178TR7KE0784C2GV2206H98PPY';
export const contractName = 'microlending';


### src/lib/stacks/loans.ts
import { executeContractCall } from './transactions';

export async function createLoan(
  amount: number,
  collateralAmount: number,
  duration: number,
  interestRate: number
) {
  return executeContractCall({
    functionName: 'create-loan',
    functionArgs: [
      amount.toString(),
      collateralAmount.toString(),
      duration.toString(),
      interestRate.toString(),
    ],
  });
}

export async function liquidateLoan(loanId: number) {
  return executeContractCall({
    functionName: 'liquidate',
    functionArgs: [loanId.toString()],
  });
}

export async function repayLoan(loanId: number, amount: number) {
  return executeContractCall({
    functionName: 'repay',
    functionArgs: [loanId.toString(), amount.toString()],
  });
}

### src/lib/stacks/transactions.ts
import {
  AnchorMode,
  PostConditionMode,
  makeContractCall,
  broadcastTransaction,
} from '@stacks/transactions';
import { userSession } from '../auth';
import { network, contractAddress, contractName } from './config';
import { TransactionOptions } from './types';

export async function executeContractCall(options: TransactionOptions) {
  const txOptions = {
    contractAddress,
    contractName,
    functionName: options.functionName,
    functionArgs: options.functionArgs,
    network,
    anchorMode: AnchorMode.Any,
    postConditionMode: PostConditionMode.Allow,
    senderKey: userSession.loadUserData().appPrivateKey,
  };

  try {
    const transaction = await makeContractCall(txOptions);
    return await broadcastTransaction(transaction, network);
  } catch (error) {
    console.error(`Error executing contract call ${options.functionName}:`, error);
    throw error;
  }
}


### src/lib/stacks/types.ts
export interface TransactionOptions {
  functionName: string;
  functionArgs: string[];
}


### src/lib/auth.ts
import { AppConfig, UserSession, showConnect } from "@stacks/connect";

export const appConfig = new AppConfig(["store_write", "publish_data"]);
export const userSession = new UserSession({ appConfig });

export function authenticate() {
  showConnect({
    appDetails: {
      name: "MicroLend",
      icon: "https://raw.githubusercontent.com/stacksgov/stacksgov.github.io/master/img/stacks-logo.svg",
    },
    redirectTo: "/",
    onFinish: () => {
      window.location.reload();
    },
    userSession,
  });
}

export function getUserData() {
  return userSession.loadUserData();
}

export function signUserOut() {
  userSession.signUserOut();
  window.location.reload();
}


### src/lib/stacks.ts
import { StacksTestnet } from '@stacks/network';
import {
  AnchorMode,
  PostConditionMode,
  makeContractCall,
  broadcastTransaction,
} from '@stacks/transactions';
import { userSession } from './auth';

export const network = new StacksTestnet();
const contractAddress = 'STHB047A30W99178TR7KE0784C2GV2206H98PPY';
const contractName = 'microlending';

export async function createLoan(
  amount: number,
  collateralAmount: number,
  duration: number,
  interestRate: number
) {
  const functionArgs = [
    amount.toString(),
    collateralAmount.toString(),
    duration.toString(),
    interestRate.toString(),
  ];

  const txOptions = {
    contractAddress,
    contractName,
    functionName: 'create-loan',
    functionArgs,
    network,
    anchorMode: AnchorMode.Any,
    postConditionMode: PostConditionMode.Allow,
    senderKey: userSession.loadUserData().appPrivateKey,
  };

  try {
    const transaction = await makeContractCall(txOptions);
    const broadcastResponse = await broadcastTransaction(transaction, network);
    return broadcastResponse;
  } catch (error) {
    console.error('Error creating loan:', error);
    throw error;
  }
}

export async function liquidateLoan(loanId: number) {
  const txOptions = {
    contractAddress,
    contractName,
    functionName: 'liquidate',
    functionArgs: [loanId.toString()],
    network,
    anchorMode: AnchorMode.Any,
    postConditionMode: PostConditionMode.Allow,
    senderKey: userSession.loadUserData().appPrivateKey,
  };

  try {
    const transaction = await makeContractCall(txOptions);
    const broadcastResponse = await broadcastTransaction(transaction, network);
    return broadcastResponse;
  } catch (error) {
    console.error('Error liquidating loan:', error);
    throw error;
  }
}

export async function repayLoan(loanId: number, amount: number) {
  const txOptions = {
    contractAddress,
    contractName,
    functionName: 'repay',
    functionArgs: [loanId.toString(), amount.toString()],
    network,
    anchorMode: AnchorMode.Any,
    postConditionMode: PostConditionMode.Allow,
    senderKey: userSession.loadUserData().appPrivateKey,
  };

  try {
    const transaction = await makeContractCall(txOptions);
    const broadcastResponse = await broadcastTransaction(transaction, network);
    return broadcastResponse;
  } catch (error) {
    console.error('Error repaying loan:', error);
    throw error;
  }
}

export async function getLoanDetails(loanId: number) {
  // Implement read-only function call to get loan details
  // This will depend on your smart contract's specific getter functions
}

export async function getUserLoans(userAddress: string) {
  // Implement read-only function call to get user's loans
  // This will depend on your smart contract's specific getter functions
}


### src/App.tsx
import React from "react";
import { Layout } from "./components/Layout";
import { Dashboard } from "./components/Dashboard";
import { LoanForm } from "./components/loans/LoanForm";
import { LoanTable } from "./components/LoanTable";
import { AdminPanel } from "./components/AdminPanel";

// Mock data for demonstration - will be replaced with real data from smart contract
const mockReputation = {
  successfulRepayments: 5,
  defaults: 0,
  totalBorrowed: 10000,
  reputationScore: 95,
};

const mockLoans = {
  activeLoans: [1, 2, 3],
  totalActiveBorrowed: 5000,
};

const mockActiveLoans = [
  {
    loanId: 1,
    borrower: "0x1234...5678",
    amount: 1000,
    collateralAmount: 2000,
    collateralAsset: "STX",
    interestRate: 5,
    startHeight: 12345,
    duration: 30,
    status: "ACTIVE" as "ACTIVE" | "PENDING" | "LIQUIDATED",
    lenders: [],
    repaidAmount: 0,
    liquidationPriceThreshold: 1600,
  },
  {
    loanId: 2,
    borrower: "0x5678...9012",
    amount: 2000,
    collateralAmount: 4000,
    collateralAsset: "STX",
    interestRate: 6,
    startHeight: 12350,
    duration: 45,
    status: "PENDING" as "ACTIVE" | "PENDING" | "LIQUIDATED",
    lenders: [],
    repaidAmount: 0,
    liquidationPriceThreshold: 3200,
  },
];

function App() {
  return (
    <Layout>
      <div className="space-y-8">
        <Dashboard reputation={mockReputation} loans={mockLoans} />

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <LoanForm />
          <AdminPanel />
        </div>

        <LoanTable loans={mockActiveLoans} />
      </div>
    </Layout>
  );
}

export default App;



### src/types.ts
export interface UserReputation {
  successfulRepayments: number;
  defaults: number;
  totalBorrowed: number;
  reputationScore: number;
}

export interface UserLoans {
  activeLoans: number[];
  totalActiveBorrowed: number;
}

export interface Loan {
  loanId: number;
  borrower: string;
  amount: number;
  collateralAmount: number;
  collateralAsset: string;
  interestRate: number;
  startHeight: number;
  duration: number;
  status: 'ACTIVE' | 'PENDING' | 'LIQUIDATED';
  lenders: string[];
  repaidAmount: number;
  liquidationPriceThreshold: number;
}